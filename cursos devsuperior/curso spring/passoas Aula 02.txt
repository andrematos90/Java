- IMPLEMENTAR MODELO DE DOMINIO

* criar a classe GameList em com/devsuperior/dslist/entities




package com.devsuperior.dslist.entities;

import jakarta.persistence.*;

import java.util.Objects;


@Entity
@Table(name="tb_gameList")
public class GameList {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private long id;
    private  String name;

    public GameList() {

    }

    public GameList(long id, String name) {
        this.id = id;
        this.name = name;
    }

    public long getId() {
        return id;
    }

    public void setId(long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }



    //comparam por id se um gamelist é igual a outro


    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof GameList gameList)) return false;
        return getId() == gameList.getId();
    }

    @Override
    public int hashCode() {
        return Objects.hash(getId());
    }
}



-------------------------------------------------------------------------------------------

- em com/devsuperior/dslist/entities  criar classe auxiliar "BelongingPK" que faz referencias do relacionamento das entidades de Game e GameList é como se ela fizesse a união das duas classes e criasse uma chave primaria que representaria as duas, pq no repository é aceito apenas um tipo de argmento no id 


package com.devsuperior.dslist.entities;

import jakarta.persistence.Embeddable;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;

import java.util.Objects;

@Embeddable //indica que "o tipo BelongingPk representará dois campos)
public class BelongingPk {

    @ManyToOne
    @JoinColumn(name = "game_id") // Especifica o nome da coluna de junção (nome da chave estrangeira)
    private Game game;

    @ManyToOne
    @JoinColumn(name = "list_id") // Especifica o nome da coluna de junção (nome da chave estrangeira)
    private GameList list;

    public BelongingPk() {

    }

    public BelongingPk(Game game, GameList list) {
        this.game = game;
        this.list = list;
    }

    public Game getGame() {
        return game;
    }

    public void setGame(Game game) {
        this.game = game;
    }

    public GameList getList() {
        return list;
    }

    public void setList(GameList list) {
        this.list = list;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof BelongingPk that)) return false;
        return Objects.equals(getGame(), that.getGame()) && Objects.equals(getList(), that.getList());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getGame(), getList());
    }
}


/*OBS:
@ManyToOne
frequentemente utilizada em conjunto com outras anotações para representar
um relacionamento muitos-para-um entre entidades.
 é usada para mapear o relacionamento entre Game e GameList.
  Isso indica que muitos games podem estar associados a uma unica lista de games
  O atributo cliente representa a parte "muitos" do relacionamento.


A anotação @JoinColumn em JPA é usada para especificar detalhes sobre a coluna

de junção (join column) quando há um relacionamento entre entidades.
Ela geralmente é usada em conjunto com anotações como @ManyToOne ou @OneToOne
para personalizar como as colunas de junção devem ser mapeadas no banco de dados.

@Embeddable
é usada para marcar uma classe cujos objetos serão incorporados como componentes de outra entidade. Ela é frequentemente usada em conjunto com a anotação @EmbeddedId ou @Embedded.
 */



*criar a classe "Belonging"


package com.devsuperior.dslist.entities;


import jakarta.persistence.EmbeddedId;
import jakarta.persistence.Entity;
import jakarta.persistence.Table;

import java.util.Objects;

@Entity
@Table(name = "tb_belonging")
public class Belonging {


    @EmbeddedId
    private BelongingPk id  = new BelongingPk();
    private Integer position;

    public Belonging() {
    }

    public Belonging(Game game, GameList list, Integer position) {
        id.setGame(game);
        id.setList(list);
        this.position = position;
    }

    public BelongingPk getId() {
        return id;
    }

    public void setId(BelongingPk id) {
        this.id = id;
    }

    public Integer getPosition() {
        return position;
    }

    public void setPosition(Integer position) {
        this.position = position;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Belonging belonging)) return false;
        return Objects.equals(getId(), belonging.getId());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getId());
    }
}

/*
OBS:

@EmbeddedId é utilizada em conjunto com JPA (Java Persistence API) para representar
 uma chave primária incorporada em uma entidade. Quando uma entidade possui uma chave
  primária composta por múltiplos campos, é possível encapsular esses campos em uma
  classe auxiliar e marcá-la com @Embeddable. A classe que contém essa chave primária
   composta utiliza @EmbeddedId para indicar que a chave está incorporada na própria
    classe.
 */



-----------------------------------------------------------------------------------------------
- ATUALIZAR SEED DA BASE DE DADOS

*inserir lista de categorias na base dados em "import.sql" com os comandos:

INSERT INTO tb_game_list (name) VALUES ('Aventura e RPG');
INSERT INTO tb_game_list (name) VALUES ('Jogos de plataforma');


*inserir associaões para falar qual jogo está em qual lista:

INSERT INTO tb_belonging (list_id, game_id, position) VALUES (1, 1, 0);
INSERT INTO tb_belonging (list_id, game_id, position) VALUES (1, 2, 1);
INSERT INTO tb_belonging (list_id, game_id, position) VALUES (1, 3, 2);
INSERT INTO tb_belonging (list_id, game_id, position) VALUES (1, 4, 3);
INSERT INTO tb_belonging (list_id, game_id, position) VALUES (1, 5, 4);

INSERT INTO tb_belonging (list_id, game_id, position) VALUES (2, 6, 0);
INSERT INTO tb_belonging (list_id, game_id, position) VALUES (2, 7, 1);
INSERT INTO tb_belonging (list_id, game_id, position) VALUES (2, 8, 2);
INSERT INTO tb_belonging (list_id, game_id, position) VALUES (2, 9, 3);
INSERT INTO tb_belonging (list_id, game_id, position) VALUES (2, 10, 4);


--------------------------------------------------------------------------------------------------

- CRIAR GameDTO E BUSCA DE GAME POR ID
terá um endpoint onde é passado o id do game que deve ser buscado na base


*criar GameDTO  em com/devsuperior/dslist/dto/GameDTO que  terá todos os campos, pq será usado para preencher a tela aonde aparece 
todas as informações do game


package com.devsuperior.dslist.dto;

import com.devsuperior.dslist.entities.Game;
import jakarta.persistence.Column;
import org.springframework.beans.BeanUtils;

import java.util.Objects;

public class GameDTO {

    private Long id;
    private String title;
    private Integer year;
    private String genre;
    private String platforms;
    private Double score;
    private String imgUrl;
    private String shortDescription;
    private String longDescription;

    public GameDTO() {
    }

    public GameDTO(Game entity) {
       /* this.id = id;
        this.title = title;
        this.year = year;
        this.genre = genre;
        this.platforms = platforms;
        this.score = score;
        this.imgUrl = imgUrl;
        this.shortDescription = shortDescription;
        this.longDescription = longDescription;

        ou pode se fazer como no código abaixo
        onde é criada uma copia das propriedades da entidade do tipo "Game"
        para o GameDTO que é o "this" isso serve quando o DTO tera as mesmas
        propriedades de Game
        Obs: para funcionar também deve se ter os métodos getters e setters

        */

        BeanUtils.copyProperties(entity, this);

    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public Integer getYear() {
        return year;
    }

    public void setYear(Integer year) {
        this.year = year;
    }

    public String getGenre() {
        return genre;
    }

    public void setGenre(String genre) {
        this.genre = genre;
    }

    public String getPlatforms() {
        return platforms;
    }

    public void setPlatforms(String platforms) {
        this.platforms = platforms;
    }

    public Double getScore() {
        return score;
    }

    public void setScore(Double score) {
        this.score = score;
    }

    public String getImgUrl() {
        return imgUrl;
    }

    public void setImgUrl(String imgUrl) {
        this.imgUrl = imgUrl;
    }

    public String getShortDescription() {
        return shortDescription;
    }

    public void setShortDescription(String shortDescription) {
        this.shortDescription = shortDescription;
    }

    public String getLongDescription() {
        return longDescription;
    }

    public void setLongDescription(String longDescription) {
        this.longDescription = longDescription;
    }


}


---------------------------------------------------------------------------------------------------

- NO SERVIE CRIAR MÉTODO PARA BUSCAR POR ID


package com.devsuperior.dslist.services;

import com.devsuperior.dslist.dto.GameDTO;
import com.devsuperior.dslist.dto.GameMinDTO;
import com.devsuperior.dslist.entities.Game;
import com.devsuperior.dslist.repositories.GameRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;

@Service // registra como sendo um componente do sistema, permitindo a injeção dependencias
public class GameService {
    @Autowired
    private GameRepository gameRepository;
    public List<GameMinDTO> findAll(){
        List <Game> result = gameRepository.findAll();
        List<GameMinDTO> dto = result.stream().map(x -> new GameMinDTO(x)).toList();
        return dto;

    }

    @Transactional(readOnly = true) // é utilizada para indicar que um método deve ser envolvido por uma transação
    public GameDTO findById(Long id){
        Game result = gameRepository.findById(id).get();
        GameDTO dto = new GameDTO(result);
        return dto;

    }

    /* o método retornará um GameDTO (que possui todas as propriedades do game),
    findById(id); é o método do repository no qual é passado um id e ele retorna
    um "optional" para extrarir o Game desse optional usa se o ".get() tudo é
    salvo na variável result que é do tipo Game"

     GameDTO dto = new GameDTO(result);
     converte de Game para o tipo GameDto e salvo na variável dto que é retornada
     */
}


--------------------------------------------------------------------------------------------------

- CRIAR O MÉTODO QUE BUSCA POR ID NO CONTROLLER 

    @GetMapping(value = "/{id}")
    public GameDTO findById(@PathVariable Long id){
        GameDTO result = gameService.findById(id);
        return result;
    }

    /*
    @PathVariable
    extrai o valor que é passado no endpoint
    e vinculá-la na variável "id"  que é passada como parametro do
    método
    */

-----------------------------------------------------------------------------------------------------

- BUSCA DE TODAS AS LISTAS
criar GameListDTO,criar repository, criar método no service, e controller




*criar GameListDTO em com/devsuperior/dslist/dto


package com.devsuperior.dslist.dto;

import com.devsuperior.dslist.entities.GameList;
import org.springframework.beans.BeanUtils;

public class GameListDTO {

    private long id;
    private  String name;

    public GameListDTO() {
    }

    public GameListDTO(GameList entity) {
        BeanUtils.copyProperties(entity, this);

        /*
         usar o BeanUtils.copyProperties() ou :

         id = entity.getId();
         name = entity.getName();

         */
    }

    public long getId() {
        return id;
    }

    public void setId(long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }
}



---------------------------------------------------------------------------------------------

*criar GameListRepository em com/devsuperior/dslist/repositories/GameListRepository.java


package com.devsuperior.dslist.repositories;

import com.devsuperior.dslist.entities.Game;
import com.devsuperior.dslist.entities.GameList;
import org.springframework.data.jpa.repository.JpaRepository;

public interface GameListRepository extends JpaRepository<GameList, Long> {
}

//è passado o nome da entidade e o tipo do id


----------------------------------------------------------------------------------------------

*criar Service


package com.devsuperior.dslist.services;

import com.devsuperior.dslist.dto.GameListDTO;
import com.devsuperior.dslist.dto.GameMinDTO;
import com.devsuperior.dslist.entities.Game;
import com.devsuperior.dslist.entities.GameList;
import com.devsuperior.dslist.repositories.GameListRepository;
import com.devsuperior.dslist.repositories.GameRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class GameListService {

    @Autowired
    private GameListRepository gameRepository;

    public List<GameListDTO> findAll(){
        List <GameList> result = gameRepository.findAll();
        List<GameListDTO> dto = result.stream().map(x -> new GameListDTO(x)).toList();
        return dto;

    }




}


-------------------------------------------------------------------------------------------

* Criar controller 


package com.devsuperior.dslist.controllers;

import com.devsuperior.dslist.dto.GameListDTO;
import com.devsuperior.dslist.services.GameListService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import java.util.List;

@RestController
@RequestMapping(value = "/gameList")
public class GameListController {
    @Autowired
    private GameListService gameListService;

    @GetMapping
    public List<GameListDTO> findAll(){
        List<GameListDTO> result = gameListService.findAll();
        return result;
    }
}




